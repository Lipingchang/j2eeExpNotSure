<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.example.demo.mapper.PersonMapper" >
  <resultMap id="BaseResultMap" type="com.example.demo.entity.Person" >
    <id column="person_id" property="personId" jdbcType="INTEGER" />
    <result column="person_name" property="personName" jdbcType="VARCHAR" />
    <result column="person_pwd" property="personPwd" jdbcType="VARCHAR" />
    <result column="role_name" property="roleName" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Base_Column_List" >
    person_id, person_name, person_pwd, role_name
  </sql>

  <insert id="insertAccess"  parameterType="java.util.List">
    insert into person_access
    (person_id,access_id)
    values 
    <foreach collection="accessList" item="item" index="index" separator=",">
      (
      #{personId,jdbcType=INTEGER},
      #{item.accessId}
      )
    </foreach>
  </insert>

  <delete id="deleteAccess" parameterType="java.lang.Integer">
    delete from person_access
    where person_id = #{personId,jdbcType=INTEGER}
  </delete>

  <resultMap id="accessResultMap" type="com.example.demo.entity.Access" >
    <id column="access_id" property="accessId" jdbcType="INTEGER" />
    <result column="access_name" property="accessName" jdbcType="VARCHAR" />
    <result column="access_decs" property="accessDecs" jdbcType="VARCHAR" />
  </resultMap>

  <select id="selectAllAccess" resultMap="accessResultMap" parameterType="java.lang.Integer">
    select ac.access_id, access_name, access_decs
    from person_access pa, access ac
    where pa.person_id = #{personID,jdbcType=INTEGER} and pa.access_id=ac.access_id
  </select>

  <select id="selectByName" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List"/>
    from person
    where person.person_name = #{name,jdbcType=VARCHAR}
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from person
    where person_id = #{personId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from person
    where person_id = #{personId,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.example.demo.entity.Person" useGeneratedKeys="true" keyProperty="personId">
    insert into person (person_id, person_name, person_pwd, 
      role_name)
    values (#{personId,jdbcType=INTEGER}, #{personName,jdbcType=VARCHAR}, #{personPwd,jdbcType=VARCHAR}, 
      #{roleName,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.example.demo.entity.Person" >
    insert into person
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="personId != null" >
        person_id,
      </if>
      <if test="personName != null" >
        person_name,
      </if>
      <if test="personPwd != null" >
        person_pwd,
      </if>
      <if test="roleName != null" >
        role_name,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="personId != null" >
        #{personId,jdbcType=INTEGER},
      </if>
      <if test="personName != null" >
        #{personName,jdbcType=VARCHAR},
      </if>
      <if test="personPwd != null" >
        #{personPwd,jdbcType=VARCHAR},
      </if>
      <if test="roleName != null" >
        #{roleName,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.example.demo.entity.Person" >
    update person
    <set >
      <if test="personName != null" >
        person_name = #{personName,jdbcType=VARCHAR},
      </if>
      <if test="personPwd != null" >
        person_pwd = #{personPwd,jdbcType=VARCHAR},
      </if>
      <if test="roleName != null" >
        role_name = #{roleName,jdbcType=VARCHAR},
      </if>
    </set>
    where person_id = #{personId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.example.demo.entity.Person" >
    update person
    set person_name = #{personName,jdbcType=VARCHAR},
      person_pwd = #{personPwd,jdbcType=VARCHAR},
      role_name = #{roleName,jdbcType=VARCHAR}
    where person_id = #{personId,jdbcType=INTEGER}
  </update>
</mapper>